// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.11.4
// source: process.proto

package data

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version     string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Transaction string              `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Definition  *Process_Definition `protobuf:"bytes,10,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{0}
}

func (x *Process) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Process) GetTransaction() string {
	if x != nil {
		return x.Transaction
	}
	return ""
}

func (x *Process) GetDefinition() *Process_Definition {
	if x != nil {
		return x.Definition
	}
	return nil
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string              `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Event   map[string]*any.Any `protobuf:"bytes,10,rep,name=event,proto3" json:"event,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Entity  map[string]*any.Any `protobuf:"bytes,11,rep,name=entity,proto3" json:"entity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{1}
}

func (x *Input) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Input) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Input) GetEvent() map[string]*any.Any {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Input) GetEntity() map[string]*any.Any {
	if x != nil {
		return x.Entity
	}
	return nil
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Event  map[string]*any.Any `protobuf:"bytes,10,rep,name=event,proto3" json:"event,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Entity map[string]*any.Any `protobuf:"bytes,11,rep,name=entity,proto3" json:"entity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{2}
}

func (x *Output) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Output) GetEvent() map[string]*any.Any {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Output) GetEntity() map[string]*any.Any {
	if x != nil {
		return x.Entity
	}
	return nil
}

type Process_Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *Process_Data `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output *Process_Data `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Error  *Process_Data `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Process_Definition) Reset() {
	*x = Process_Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process_Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process_Definition) ProtoMessage() {}

func (x *Process_Definition) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process_Definition.ProtoReflect.Descriptor instead.
func (*Process_Definition) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Process_Definition) GetInput() *Process_Data {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Process_Definition) GetOutput() *Process_Data {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Process_Definition) GetError() *Process_Data {
	if x != nil {
		return x.Error
	}
	return nil
}

type Process_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event  *Event  `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Entity *Entity `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *Process_Data) Reset() {
	*x = Process_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_process_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process_Data) ProtoMessage() {}

func (x *Process_Data) ProtoReflect() protoreflect.Message {
	mi := &file_process_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process_Data.ProtoReflect.Descriptor instead.
func (*Process_Data) Descriptor() ([]byte, []int) {
	return file_process_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Process_Data) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Process_Data) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

var File_process_proto protoreflect.FileDescriptor

var file_process_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8c, 0x01,
	0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x4f, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xb5, 0x02,
	0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x4e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x02, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x1a, 0x4e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4f, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x32, 0x56, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x50, 0x49,
	0x12, 0x48, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x30, 0x01, 0x32, 0xbc, 0x02, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x50, 0x49, 0x12, 0x43, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x30, 0x01, 0x12, 0x4e, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x30,
	0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x30, 0x01, 0x12, 0x4e, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x0d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x30,
	0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x30, 0x01, 0x12, 0x45, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12,
	0x18, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x58, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x50, 0x49, 0x12, 0x45, 0x0a, 0x06,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x0d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x3a, 0x01, 0x2a, 0x42, 0x3d, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x68, 0x69, 0x73, 0x75,
	0x69, 0x74, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x18, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x68, 0x69, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_process_proto_rawDescOnce sync.Once
	file_process_proto_rawDescData = file_process_proto_rawDesc
)

func file_process_proto_rawDescGZIP() []byte {
	file_process_proto_rawDescOnce.Do(func() {
		file_process_proto_rawDescData = protoimpl.X.CompressGZIP(file_process_proto_rawDescData)
	})
	return file_process_proto_rawDescData
}

var file_process_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_process_proto_goTypes = []interface{}{
	(*Process)(nil),            // 0: data.Process
	(*Input)(nil),              // 1: data.Input
	(*Output)(nil),             // 2: data.Output
	(*Process_Definition)(nil), // 3: data.Process.Definition
	(*Process_Data)(nil),       // 4: data.Process.Data
	nil,                        // 5: data.Input.EventEntry
	nil,                        // 6: data.Input.EntityEntry
	nil,                        // 7: data.Output.EventEntry
	nil,                        // 8: data.Output.EntityEntry
	(*Event)(nil),              // 9: data.Event
	(*Entity)(nil),             // 10: data.Entity
	(*any.Any)(nil),            // 11: google.protobuf.Any
	(*Options)(nil),            // 12: data.Options
}
var file_process_proto_depIdxs = []int32{
	3,  // 0: data.Process.definition:type_name -> data.Process.Definition
	5,  // 1: data.Input.event:type_name -> data.Input.EventEntry
	6,  // 2: data.Input.entity:type_name -> data.Input.EntityEntry
	7,  // 3: data.Output.event:type_name -> data.Output.EventEntry
	8,  // 4: data.Output.entity:type_name -> data.Output.EntityEntry
	4,  // 5: data.Process.Definition.input:type_name -> data.Process.Data
	4,  // 6: data.Process.Definition.output:type_name -> data.Process.Data
	4,  // 7: data.Process.Definition.error:type_name -> data.Process.Data
	9,  // 8: data.Process.Data.event:type_name -> data.Event
	10, // 9: data.Process.Data.entity:type_name -> data.Entity
	11, // 10: data.Input.EventEntry.value:type_name -> google.protobuf.Any
	11, // 11: data.Input.EntityEntry.value:type_name -> google.protobuf.Any
	11, // 12: data.Output.EventEntry.value:type_name -> google.protobuf.Any
	11, // 13: data.Output.EntityEntry.value:type_name -> google.protobuf.Any
	1,  // 14: data.ProcessAPI.Execute:input_type -> data.Input
	12, // 15: data.ProcessReadAPI.List:input_type -> data.Options
	12, // 16: data.ProcessReadAPI.Success:input_type -> data.Options
	12, // 17: data.ProcessReadAPI.Failure:input_type -> data.Options
	12, // 18: data.ProcessReadAPI.Get:input_type -> data.Options
	0,  // 19: data.ProcessWriteAPI.Record:input_type -> data.Process
	2,  // 20: data.ProcessAPI.Execute:output_type -> data.Output
	0,  // 21: data.ProcessReadAPI.List:output_type -> data.Process
	0,  // 22: data.ProcessReadAPI.Success:output_type -> data.Process
	0,  // 23: data.ProcessReadAPI.Failure:output_type -> data.Process
	0,  // 24: data.ProcessReadAPI.Get:output_type -> data.Process
	0,  // 25: data.ProcessWriteAPI.Record:output_type -> data.Process
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_process_proto_init() }
func file_process_proto_init() {
	if File_process_proto != nil {
		return
	}
	file_common_proto_init()
	file_event_proto_init()
	file_entity_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_process_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process_Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_process_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_process_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_process_proto_goTypes,
		DependencyIndexes: file_process_proto_depIdxs,
		MessageInfos:      file_process_proto_msgTypes,
	}.Build()
	File_process_proto = out.File
	file_process_proto_rawDesc = nil
	file_process_proto_goTypes = nil
	file_process_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProcessAPIClient is the client API for ProcessAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessAPIClient interface {
	Execute(ctx context.Context, opts ...grpc.CallOption) (ProcessAPI_ExecuteClient, error)
}

type processAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessAPIClient(cc grpc.ClientConnInterface) ProcessAPIClient {
	return &processAPIClient{cc}
}

func (c *processAPIClient) Execute(ctx context.Context, opts ...grpc.CallOption) (ProcessAPI_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessAPI_serviceDesc.Streams[0], "/data.ProcessAPI/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &processAPIExecuteClient{stream}
	return x, nil
}

type ProcessAPI_ExecuteClient interface {
	Send(*Input) error
	Recv() (*Output, error)
	grpc.ClientStream
}

type processAPIExecuteClient struct {
	grpc.ClientStream
}

func (x *processAPIExecuteClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processAPIExecuteClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessAPIServer is the server API for ProcessAPI service.
type ProcessAPIServer interface {
	Execute(ProcessAPI_ExecuteServer) error
}

// UnimplementedProcessAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProcessAPIServer struct {
}

func (*UnimplementedProcessAPIServer) Execute(ProcessAPI_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterProcessAPIServer(s *grpc.Server, srv ProcessAPIServer) {
	s.RegisterService(&_ProcessAPI_serviceDesc, srv)
}

func _ProcessAPI_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessAPIServer).Execute(&processAPIExecuteServer{stream})
}

type ProcessAPI_ExecuteServer interface {
	Send(*Output) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type processAPIExecuteServer struct {
	grpc.ServerStream
}

func (x *processAPIExecuteServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processAPIExecuteServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProcessAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.ProcessAPI",
	HandlerType: (*ProcessAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _ProcessAPI_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "process.proto",
}

// ProcessReadAPIClient is the client API for ProcessReadAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessReadAPIClient interface {
	List(ctx context.Context, in *Options, opts ...grpc.CallOption) (ProcessReadAPI_ListClient, error)
	Success(ctx context.Context, in *Options, opts ...grpc.CallOption) (ProcessReadAPI_SuccessClient, error)
	Failure(ctx context.Context, in *Options, opts ...grpc.CallOption) (ProcessReadAPI_FailureClient, error)
	Get(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Process, error)
}

type processReadAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessReadAPIClient(cc grpc.ClientConnInterface) ProcessReadAPIClient {
	return &processReadAPIClient{cc}
}

func (c *processReadAPIClient) List(ctx context.Context, in *Options, opts ...grpc.CallOption) (ProcessReadAPI_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessReadAPI_serviceDesc.Streams[0], "/data.ProcessReadAPI/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &processReadAPIListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessReadAPI_ListClient interface {
	Recv() (*Process, error)
	grpc.ClientStream
}

type processReadAPIListClient struct {
	grpc.ClientStream
}

func (x *processReadAPIListClient) Recv() (*Process, error) {
	m := new(Process)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processReadAPIClient) Success(ctx context.Context, in *Options, opts ...grpc.CallOption) (ProcessReadAPI_SuccessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessReadAPI_serviceDesc.Streams[1], "/data.ProcessReadAPI/Success", opts...)
	if err != nil {
		return nil, err
	}
	x := &processReadAPISuccessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessReadAPI_SuccessClient interface {
	Recv() (*Process, error)
	grpc.ClientStream
}

type processReadAPISuccessClient struct {
	grpc.ClientStream
}

func (x *processReadAPISuccessClient) Recv() (*Process, error) {
	m := new(Process)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processReadAPIClient) Failure(ctx context.Context, in *Options, opts ...grpc.CallOption) (ProcessReadAPI_FailureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessReadAPI_serviceDesc.Streams[2], "/data.ProcessReadAPI/Failure", opts...)
	if err != nil {
		return nil, err
	}
	x := &processReadAPIFailureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessReadAPI_FailureClient interface {
	Recv() (*Process, error)
	grpc.ClientStream
}

type processReadAPIFailureClient struct {
	grpc.ClientStream
}

func (x *processReadAPIFailureClient) Recv() (*Process, error) {
	m := new(Process)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processReadAPIClient) Get(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/data.ProcessReadAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessReadAPIServer is the server API for ProcessReadAPI service.
type ProcessReadAPIServer interface {
	List(*Options, ProcessReadAPI_ListServer) error
	Success(*Options, ProcessReadAPI_SuccessServer) error
	Failure(*Options, ProcessReadAPI_FailureServer) error
	Get(context.Context, *Options) (*Process, error)
}

// UnimplementedProcessReadAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProcessReadAPIServer struct {
}

func (*UnimplementedProcessReadAPIServer) List(*Options, ProcessReadAPI_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedProcessReadAPIServer) Success(*Options, ProcessReadAPI_SuccessServer) error {
	return status.Errorf(codes.Unimplemented, "method Success not implemented")
}
func (*UnimplementedProcessReadAPIServer) Failure(*Options, ProcessReadAPI_FailureServer) error {
	return status.Errorf(codes.Unimplemented, "method Failure not implemented")
}
func (*UnimplementedProcessReadAPIServer) Get(context.Context, *Options) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterProcessReadAPIServer(s *grpc.Server, srv ProcessReadAPIServer) {
	s.RegisterService(&_ProcessReadAPI_serviceDesc, srv)
}

func _ProcessReadAPI_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Options)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessReadAPIServer).List(m, &processReadAPIListServer{stream})
}

type ProcessReadAPI_ListServer interface {
	Send(*Process) error
	grpc.ServerStream
}

type processReadAPIListServer struct {
	grpc.ServerStream
}

func (x *processReadAPIListServer) Send(m *Process) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessReadAPI_Success_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Options)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessReadAPIServer).Success(m, &processReadAPISuccessServer{stream})
}

type ProcessReadAPI_SuccessServer interface {
	Send(*Process) error
	grpc.ServerStream
}

type processReadAPISuccessServer struct {
	grpc.ServerStream
}

func (x *processReadAPISuccessServer) Send(m *Process) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessReadAPI_Failure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Options)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessReadAPIServer).Failure(m, &processReadAPIFailureServer{stream})
}

type ProcessReadAPI_FailureServer interface {
	Send(*Process) error
	grpc.ServerStream
}

type processReadAPIFailureServer struct {
	grpc.ServerStream
}

func (x *processReadAPIFailureServer) Send(m *Process) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessReadAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessReadAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.ProcessReadAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessReadAPIServer).Get(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProcessReadAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.ProcessReadAPI",
	HandlerType: (*ProcessReadAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProcessReadAPI_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ProcessReadAPI_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Success",
			Handler:       _ProcessReadAPI_Success_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Failure",
			Handler:       _ProcessReadAPI_Failure_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "process.proto",
}

// ProcessWriteAPIClient is the client API for ProcessWriteAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessWriteAPIClient interface {
	Record(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Process, error)
}

type processWriteAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessWriteAPIClient(cc grpc.ClientConnInterface) ProcessWriteAPIClient {
	return &processWriteAPIClient{cc}
}

func (c *processWriteAPIClient) Record(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/data.ProcessWriteAPI/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProcessWriteAPIServer is the server API for ProcessWriteAPI service.
type ProcessWriteAPIServer interface {
	Record(context.Context, *Process) (*Process, error)
}

// UnimplementedProcessWriteAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProcessWriteAPIServer struct {
}

func (*UnimplementedProcessWriteAPIServer) Record(context.Context, *Process) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}

func RegisterProcessWriteAPIServer(s *grpc.Server, srv ProcessWriteAPIServer) {
	s.RegisterService(&_ProcessWriteAPI_serviceDesc, srv)
}

func _ProcessWriteAPI_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Process)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessWriteAPIServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.ProcessWriteAPI/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessWriteAPIServer).Record(ctx, req.(*Process))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProcessWriteAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.ProcessWriteAPI",
	HandlerType: (*ProcessWriteAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _ProcessWriteAPI_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "process.proto",
}

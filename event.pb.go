// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package data

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version              string              `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Transaction          string              `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Payload              map[string]*any.Any `protobuf:"bytes,10,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Event) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

func (m *Event) GetPayload() map[string]*any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "data.Event")
	proto.RegisterMapType((map[string]*any.Any)(nil), "data.Event.PayloadEntry")
}

func init() {
	proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e)
}

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xcf, 0x8a, 0xd4, 0x30,
	0x18, 0x27, 0x9d, 0xd9, 0x1d, 0xfd, 0x3a, 0x2b, 0xbb, 0x51, 0x97, 0x6c, 0x5d, 0x64, 0xec, 0x69,
	0x99, 0x43, 0xba, 0xd4, 0x8b, 0xcc, 0x45, 0xba, 0xb0, 0x88, 0xa0, 0x58, 0x7a, 0xf1, 0x9c, 0x69,
	0xe3, 0x6e, 0xb0, 0x4d, 0x4a, 0x9b, 0x16, 0x8a, 0x78, 0xf1, 0x11, 0xf4, 0xd1, 0x7c, 0x05, 0xaf,
	0xbe, 0x83, 0xf4, 0xcb, 0x0c, 0x56, 0x84, 0xb9, 0xe5, 0xfb, 0x7e, 0x7f, 0xf2, 0xfb, 0x25, 0xe0,
	0xcb, 0x5e, 0x6a, 0xcb, 0xeb, 0xc6, 0x58, 0x43, 0xe7, 0x85, 0xb0, 0x22, 0xb8, 0xbc, 0x33, 0xe6,
	0xae, 0x94, 0x91, 0xa8, 0x55, 0x24, 0xb4, 0x36, 0x56, 0x58, 0x65, 0x74, 0xeb, 0x38, 0xc1, 0xc5,
	0x0e, 0xc5, 0x69, 0xdb, 0x7d, 0x8a, 0x84, 0x1e, 0x76, 0xd0, 0x32, 0x37, 0x55, 0x65, 0xb4, 0x9b,
	0xc2, 0xdf, 0x04, 0x8e, 0x6e, 0x47, 0x73, 0xfa, 0x08, 0x3c, 0x55, 0x30, 0xb2, 0x22, 0x57, 0x0f,
	0x33, 0x4f, 0x15, 0x94, 0xc2, 0x5c, 0x8b, 0x4a, 0x32, 0x0f, 0x37, 0x78, 0xa6, 0x0c, 0x16, 0xbd,
	0x6c, 0x5a, 0x65, 0x34, 0x9b, 0xe1, 0x7a, 0x3f, 0xd2, 0x15, 0xf8, 0xb6, 0x11, 0xba, 0x15, 0xf9,
	0x18, 0x83, 0xcd, 0x11, 0x9d, 0xae, 0x68, 0x0c, 0x8b, 0x5a, 0x0c, 0xa5, 0x11, 0x05, 0x83, 0xd5,
	0xec, 0xca, 0x8f, 0x19, 0x1f, 0x8b, 0x70, 0xbc, 0x9d, 0xa7, 0x0e, 0xba, 0xd5, 0xb6, 0x19, 0xb2,
	0x3d, 0x31, 0x48, 0x61, 0x39, 0x05, 0xe8, 0x29, 0xcc, 0x3e, 0xcb, 0x61, 0x17, 0x72, 0x3c, 0xd2,
	0x35, 0x1c, 0xf5, 0xa2, 0xec, 0x5c, 0x4c, 0x3f, 0x7e, 0xc2, 0x5d, 0x71, 0xbe, 0x2f, 0xce, 0x13,
	0x3d, 0x64, 0x8e, 0xb2, 0xf1, 0x5e, 0x91, 0xf8, 0x3d, 0x3c, 0xc0, 0x0b, 0x93, 0xf4, 0x2d, 0x4d,
	0x60, 0x91, 0x76, 0xdb, 0x52, 0xb5, 0xf7, 0xd4, 0x9f, 0x64, 0x09, 0xa6, 0x43, 0x78, 0xf9, 0xed,
	0xe7, 0xaf, 0x1f, 0xde, 0x79, 0x78, 0x16, 0xe1, 0x1f, 0x44, 0xfd, 0x75, 0x54, 0x3b, 0xd1, 0x86,
	0xac, 0xe3, 0xef, 0x04, 0x96, 0xc8, 0xcb, 0xa4, 0x28, 0x46, 0xcf, 0xd7, 0x30, 0x7f, 0xa7, 0x5a,
	0x4b, 0x4f, 0x9c, 0xc7, 0x87, 0x1a, 0x7f, 0xe5, 0x5f, 0xcb, 0x0b, 0xb4, 0x7c, 0x4c, 0x27, 0x96,
	0x4a, 0xb7, 0xb5, 0xcc, 0xed, 0x35, 0xa1, 0x09, 0xcc, 0xde, 0xc8, 0xc3, 0xfa, 0xe7, 0xa8, 0x67,
	0xf4, 0xfc, 0x3f, 0x7d, 0xf4, 0x45, 0x15, 0x5f, 0xe3, 0x14, 0x4e, 0x90, 0xf8, 0xb1, 0x51, 0x56,
	0xba, 0x50, 0xc7, 0x99, 0xcc, 0x4d, 0x53, 0x1c, 0xe8, 0xf9, 0x0c, 0x4d, 0x9f, 0x86, 0xa7, 0x7f,
	0x4d, 0x1b, 0xd4, 0x6c, 0xc8, 0xfa, 0xe6, 0x05, 0x9c, 0xe5, 0xa6, 0xe2, 0xf5, 0xbd, 0x6a, 0x3b,
	0x65, 0x25, 0xea, 0x6e, 0x00, 0x85, 0xe9, 0xf8, 0xd0, 0x29, 0xd9, 0x1e, 0xe3, 0x8b, 0xbf, 0xfc,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x75, 0xb2, 0x34, 0xab, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventAPIClient is the client API for EventAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventAPIClient interface {
	Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
}

type eventAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventAPIClient(cc grpc.ClientConnInterface) EventAPIClient {
	return &eventAPIClient{cc}
}

func (c *eventAPIClient) Publish(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/data.EventAPI/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventAPIServer is the server API for EventAPI service.
type EventAPIServer interface {
	Publish(context.Context, *Event) (*Event, error)
}

// UnimplementedEventAPIServer can be embedded to have forward compatible implementations.
type UnimplementedEventAPIServer struct {
}

func (*UnimplementedEventAPIServer) Publish(ctx context.Context, req *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterEventAPIServer(s *grpc.Server, srv EventAPIServer) {
	s.RegisterService(&_EventAPI_serviceDesc, srv)
}

func _EventAPI_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.EventAPI/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).Publish(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.EventAPI",
	HandlerType: (*EventAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventAPI_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

// EventReadAPIClient is the client API for EventReadAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventReadAPIClient interface {
	List(ctx context.Context, in *Options, opts ...grpc.CallOption) (EventReadAPI_ListClient, error)
	Get(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Event, error)
}

type eventReadAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventReadAPIClient(cc grpc.ClientConnInterface) EventReadAPIClient {
	return &eventReadAPIClient{cc}
}

func (c *eventReadAPIClient) List(ctx context.Context, in *Options, opts ...grpc.CallOption) (EventReadAPI_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventReadAPI_serviceDesc.Streams[0], "/data.EventReadAPI/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventReadAPIListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventReadAPI_ListClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventReadAPIListClient struct {
	grpc.ClientStream
}

func (x *eventReadAPIListClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventReadAPIClient) Get(ctx context.Context, in *Options, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/data.EventReadAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventReadAPIServer is the server API for EventReadAPI service.
type EventReadAPIServer interface {
	List(*Options, EventReadAPI_ListServer) error
	Get(context.Context, *Options) (*Event, error)
}

// UnimplementedEventReadAPIServer can be embedded to have forward compatible implementations.
type UnimplementedEventReadAPIServer struct {
}

func (*UnimplementedEventReadAPIServer) List(req *Options, srv EventReadAPI_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedEventReadAPIServer) Get(ctx context.Context, req *Options) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterEventReadAPIServer(s *grpc.Server, srv EventReadAPIServer) {
	s.RegisterService(&_EventReadAPI_serviceDesc, srv)
}

func _EventReadAPI_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Options)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventReadAPIServer).List(m, &eventReadAPIListServer{stream})
}

type EventReadAPI_ListServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventReadAPIListServer struct {
	grpc.ServerStream
}

func (x *eventReadAPIListServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventReadAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Options)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventReadAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.EventReadAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventReadAPIServer).Get(ctx, req.(*Options))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventReadAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.EventReadAPI",
	HandlerType: (*EventReadAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _EventReadAPI_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _EventReadAPI_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}

// EventWriteAPIClient is the client API for EventWriteAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventWriteAPIClient interface {
	Record(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
}

type eventWriteAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventWriteAPIClient(cc grpc.ClientConnInterface) EventWriteAPIClient {
	return &eventWriteAPIClient{cc}
}

func (c *eventWriteAPIClient) Record(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/data.EventWriteAPI/Record", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventWriteAPIServer is the server API for EventWriteAPI service.
type EventWriteAPIServer interface {
	Record(context.Context, *Event) (*Event, error)
}

// UnimplementedEventWriteAPIServer can be embedded to have forward compatible implementations.
type UnimplementedEventWriteAPIServer struct {
}

func (*UnimplementedEventWriteAPIServer) Record(ctx context.Context, req *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}

func RegisterEventWriteAPIServer(s *grpc.Server, srv EventWriteAPIServer) {
	s.RegisterService(&_EventWriteAPI_serviceDesc, srv)
}

func _EventWriteAPI_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventWriteAPIServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/data.EventWriteAPI/Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventWriteAPIServer).Record(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventWriteAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "data.EventWriteAPI",
	HandlerType: (*EventWriteAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _EventWriteAPI_Record_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
